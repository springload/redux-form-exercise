============================================
/components/App.js
============================================
import React from 'react';
import IntelligentExerciseZeroForm from '../containers/IntelligentExerciseZeroForm';
import IntelligentExerciseOneForm from '../containers/IntelligentExerciseOneForm';
import IntelligentExerciseTwoForm from '../containers/IntelligentExerciseTwoForm';
import IntelligentExerciseThreeForm from '../containers/IntelligentExerciseThreeForm';

// This is where we call the form containers
// It works like any other containers
// Note that I like to have a clear naming i.e. adding the 'Form' suffix
// to identify straight that the component is a form.
// Yes, it's a long name but at least you know what's going on.
// Meet me in /containers/IntelligentExerciseZeroForm.js
const App = () => (
    <div>
        <IntelligentExerciseZeroForm />
        <IntelligentExerciseOneForm />
        <IntelligentExerciseTwoForm />
        <IntelligentExerciseThreeForm />
    </div>
);

export default App;


============================================
/components/ExcerciseThreeForm.js
============================================
// TODO: Exercise 3 Modify me

import React, { PropTypes } from 'react';
import { Field } from 'redux-form';
import InputField from './Form/InputField';
import TextareaField from './Form/TextareaField';

const propTypes = {
    handleSubmit: PropTypes.func.isRequired,
    submitSucceeded: PropTypes.bool.isRequired,
    text: PropTypes.string,
    name: PropTypes.string,
};

const defaultProps = {
    text: '',
    name: '',
};

const ExerciseThreeForm = ({ handleSubmit, submitSucceeded, text, name }) => (
    <div>
        <div>
            <h3>Exercise 3</h3>
            <p>
                I need to be a form that takes an input (using InputField component) name
                and a textarea (using a TextareaField component that you have to create).<br />
                Label for input is "Your name:" and label for textarea is
                "Your text:"<br />
                Please make sure the name is required and raise a warning if it is not only alphabetic string.<br />
                The textarea field is required, must be alphanumeric and allow spaces, "'" and "." characters. Raise an error if one of these conditions isn't respected.<br />
                You will raise a warning if the text doesn't contain the sentence 'This is super cool.'<br />
                Result must show something like that:<br />
            </p>
            <div style={{ border: '1px solid black', paddingLeft: '10px' }}>
                <p>TheGuyWhoMadeThisExercise has written this:</p>
                <p>Probably the best example I've ever seen on the internet. This is super cool. 34 is a number.</p>
            </div>
            <p>
                TODO: Implement me in actions, reducers, containers, /components/Form/TextareaField.js &amp;<br />
                Modify /components/ExerciseThreeForm.js &amp; /components/App.js
            </p>
        </div>
        <form onSubmit={handleSubmit}>
            <fieldset>
                <legend>Exercise 3</legend>
                <div>
                    <div style={{ marginBottom: '10px' }}>
                        <Field
                            name="name"
                            type="text"
                            component={InputField}
                            label="Your name:"
                        />
                    </div>
                    <div style={{ marginBottom: '10px' }}>
                        <Field
                            name="text"
                            type="textarea"
                            component={TextareaField}
                            label="Your text:"
                        />
                    </div>
                </div>
                <button type="submit">Submit</button>
            </fieldset>
        </form>
        {submitSucceeded && (
            <div style={{ marginLeft: '10px', marginTop: '10px', color: 'green' }}>
                <p>{name} has written this:</p>
                <p>{text}</p>
            </div>
        )}
    </div>
);

ExerciseThreeForm.propTypes = propTypes;
ExerciseThreeForm.defaultProps = defaultProps;

export default ExerciseThreeForm;



============================================
/containers/IntelligentExcerciseThreeForm.js
============================================
import { connect } from 'react-redux';
import { reduxForm } from 'redux-form';
import ExerciseThreeForm from '../components/ExerciseThreeForm';
import * as actions from '../actions';

const formName = 'exercise3';

const validate = (values) => {
    const errors = {};

    if (values.name === '') { errors.name = 'Required'; }
    if (values.text === '') { errors.text = 'Required'; }

    const regex = new RegExp(/^[A-z0-9 '.]+$/);
    if (values.text && regex.test(values.text) === false) { errors.text = 'Allowed characters are [A-z0-9], spaces, \' and .'; }

    return errors;
};

const warn = (values) => {
    const warnings = {};

    const regex = new RegExp(/^[A-z]+$/);
    if (values.name && regex.test(values.name) === false) { warnings.name = 'Name should be only alphabetical'; }
    if (values.text && values.text.indexOf('This is super cool.') === -1) { warnings.text = 'Your text should contain "This is super cool.". Come on... be cool.'; }

    return warnings;
};

const mapStateToProps = (state) => {
    return {
        initialValues: state.exercise3.initialFormValues,
        text: state.exercise3.text,
        name: state.exercise3.name,
    };
};

const mapDispatchToProps = (dispatch) => {
    return {
        onSubmit: (submit) => { // Has to be named onSubmit here and will be given to Form as handleSubmit property
            dispatch(actions.exerciseThreeFormSubmit(submit));
        },
    };
};

const IntelligentExerciseThreeForm = reduxForm({
    form: formName,
    validate,
    warn,
})(ExerciseThreeForm);

export default connect(
    mapStateToProps,
    mapDispatchToProps,
)(IntelligentExerciseThreeForm);



============================================
/components/Form/TextareaField.js
============================================
import React, { PropTypes } from 'react';

const propTypes = {
    input: PropTypes.object.isRequired,
    meta: PropTypes.object.isRequired,
    label: PropTypes.string.isRequired,
};

const TextareaField = ({
    input,
    label,
    meta: { touched, error, warning },
}) => {
    return (
        <label htmlFor={input.name}>
            {label}
            <textarea
                {...input}
                id={input.name}
                style={{ marginLeft: '10px' }}
            />
            {(touched && error) && (
                <span style={{ color: '#d34545', marginLeft: '10px' }}>{error}</span>
            )}
            {(touched && warning) && (
                <span style={{ color: 'orange', marginLeft: '10px' }}>{warning}</span>
            )}
        </label>
    );
};

TextareaField.propTypes = propTypes;

export default TextareaField;




============================================
/actions/constants.js
============================================
import keyMirror from 'keymirror';

export default keyMirror({
    EXERCISE_ZERO_FORM_SUBMIT: null,
    EXERCISE_ONE_FORM_SUBMIT: null,
    EXERCISE_TWO_FORM_SUBMIT: null,
    EXERCISE_THREE_FORM_SUBMIT: null,
});


============================================
/actions/index.js
============================================
...

export const exerciseThreeFormSubmit = (submit) => {
    return {
        type: actionTypes.EXERCISE_THREE_FORM_SUBMIT,
        payload: {
            text: submit.text,
            name: submit.name,
        },
    };
};

============================================
/reducers/index.js
============================================
import { combineReducers } from 'redux';
// Redux-form has its own reducer.
// You just need to import it and combine it with your own reducers
import { reducer as formReducer } from 'redux-form';
import exercise0 from './exercise0';
import exercise1 from './exercise1';
import exercise2 from './exercise2';
import exercise3 from './exercise3';

const rootReducer = combineReducers({
    form: formReducer, // /!\ FORM REDUCER NEEDS TO BE CALLED 'form'!
    exercise0: exercise0,
    exercise1: exercise1,
    exercise2: exercise2,
    exercise3: exercise3,
});

export default rootReducer;

// And that's it! Good luck with Exercise #1!



============================================
/reducers/exercise3.js
============================================
import actionTypes from '../actions/constants';

const initialState = {
    initialFormValues: {
        name: '',
        text: '',
    },
};

const exerciseTwoFormSubmit = (state, payload) => {
    return Object.assign({}, state, {
        text: payload.text,
        name: payload.name,
    });
};

const exercise3 = (state = initialState, action) => {
    switch (action.type) {
    case actionTypes.EXERCISE_THREE_FORM_SUBMIT:
        return exerciseTwoFormSubmit(state, action.payload);
    default:
        return state;
    }
};

export default exercise3;

