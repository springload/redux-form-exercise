=============================
/components/ExerciseTwoForm.js
=============================
import React, { PropTypes } from 'react';
import { Field } from 'redux-form';
import InputField from './Form/InputField';
import CheckboxField from './Form/CheckboxField';

const propTypes = {
    handleSubmit: PropTypes.func.isRequired,
    submitSucceeded: PropTypes.bool.isRequired,
    ticked: PropTypes.bool,
    name: PropTypes.string,
};

const defaultProps = {
    ticked: false,
    name: '',
};

const ExerciseTwoForm = ({ handleSubmit, submitSucceeded, ticked, name }) => (
    <div>
        <div>
            <h3>Exercise 2</h3>
            <p>
                I need to be a form that takes an input (using InputField component) name
                and a checkbox (using a CheckboxField component that you have to create).<br />
                Label for input is "Your name:" and label for checkbox is
                "I agree with these Terms and Conditions?"<br />
                Please make sure the name is required. It must be displayed in the input as capital
                letters but it must be stored in lowercase in the state.<br />
                Also raise a warning if it is not only alphabetic string.<br />
                Note: There is no need to modify the reducers or the actions.
            </p>
            <p>
                TODO: Implement me in /components/Form/CheckboxField.js &amp;<br />
                Modify /containers/ExerciseTwoForm.js &amp; /components/Form/InputField.js
            </p>
        </div>
        <form onSubmit={handleSubmit}>
            <fieldset>
                <legend>Exercise 2</legend>
                <div>
                    <div style={{ marginBottom: '10px' }}>
                        <Field
                            name="name"
                            type="text"
                            component={InputField}
                            label="Your name:"
                            format={(value) => {
                                if (value) return value.toUpperCase();
                                return '';
                            }}
                            parse={(value) => {
                                if (value) return value.toLowerCase();
                                return '';
                            }}
                        />
                    </div>
                    <div style={{ marginBottom: '10px' }}>
                        <Field
                            name="ticked"
                            type="checkbox"
                            component={CheckboxField}
                            label="I agree with these Terms and Conditions?"
                        />
                    </div>
                </div>
                <button type="submit">Submit</button>
            </fieldset>
        </form>
        {submitSucceeded && (
            <div style={{ marginLeft: '10px', marginTop: '10px', color: 'green' }}>
                {ticked ?
                    `Congrats ${name || 'Unnamed'}, you just ticked the box for that exercise! (PUN INTENDED)`
                    :
                    `Come on ${name || 'Unnamed'}... tick that box...`
                }
            </div>
        )}
    </div>
);

ExerciseTwoForm.propTypes = propTypes;
ExerciseTwoForm.defaultProps = defaultProps;

export default ExerciseTwoForm;


=============================
/components/Form/CheckboxField.js
=============================
import React, { PropTypes } from 'react';

const propTypes = {
    input: PropTypes.object.isRequired,
    meta: PropTypes.object.isRequired,
    label: PropTypes.any,
};

const defaultProps = {
    label: undefined,
};

const CheckboxField = ({
    input,
    label,
    meta: { touched, error },
}) => (
    <label htmlFor={input.name}>
        <input
            {...input}
            id={input.name}
            type="checkbox"
        />
        {label && (
            <span style={{ marginLeft: '10px' }}>{label}</span>
        )}
        {(touched && error) && (
            <span style={{ color: '#d34545', marginLeft: '10px' }}> {error}</span>
        )}
    </label>
);

CheckboxField.propTypes = propTypes;
CheckboxField.defaultProps = defaultProps;

export default CheckboxField;


=============================
/components/Form/InputField.js
=============================
import React, { PropTypes } from 'react';

const propTypes = {
    input: PropTypes.object.isRequired,
    meta: PropTypes.object.isRequired,
    label: PropTypes.string.isRequired,
    type: PropTypes.string.isRequired,
};

const InputField = ({
    input,
    label,
    type,
    meta: { touched, error, warning },
}) => {
    return (
        <label htmlFor={input.name}>
            {label}
            <input
                {...input}
                id={input.name}
                type={type}
                style={{ marginLeft: '10px' }}
            />
            {(touched && error) && (
                <span style={{ color: '#d34545', marginLeft: '10px' }}>{error}</span>
            )}
            {(touched && warning) && (
                <span style={{ color: 'orange', marginLeft: '10px' }}>{warning}</span>
            )}
        </label>
    );
};

InputField.propTypes = propTypes;

export default InputField;
